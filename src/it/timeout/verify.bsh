import java.io.*;
import java.util.*;
import java.nio.file.*;

//
// Expectations
//

String[] files = new String[] {
  // compile: main
  // <empty>
  // compile: test
  "target/test-classes/TimeoutTests.class",
  // test: junit-platform
  "target/junit-platform/console-launcher.cmd.log"
};

String[] emptyFiles = new String[] {
  "target/junit-platform/console-launcher.err.log",
  "target/junit-platform/console-launcher.out.log"
};

String log = new String(Files.readAllBytes(basedir.toPath().resolve("build.log")), "UTF-8");
String[] snippets = new String[] {
  "[INFO] Launching JUnit Platform " + junitPlatformVersion + "...",
  "[ERROR] Global timeout of 2 seconds reached.",
  "[ERROR] Killing process #",
  "[INFO] BUILD FAILURE"
};

String[] badSnippets = new String[] {
  "[WARNING]",
  "[INFO] --- maven-surefire-plugin:2.12.4:test (default-test)"
};

//
// Verification
//

boolean ok = true;

System.out.println("\nVerifying non-empty files...");
for (String name : files) {
  Path path = basedir.toPath().resolve(name);
  if (!Files.isReadable(path)) {
    System.out.println("XXX| Expected file not found: " + path);
    ok = false;
    continue;
  }
  long size = Files.size(path);
  if (size == 0) {
    System.err.println("XXX| Expected file " + path + " not to be empty");
    ok = false;
    continue;
  }
  System.out.println("   | " + name + " exists and is not empty: " + size);
}

System.out.println("\nVerifying empty files...");
for (String name : emptyFiles) {
  long size = Files.size(basedir.toPath().resolve(name));
  if (size != 0) {
    System.err.println("XXX| Expected file " + name + " to be empty: " + size);
    ok = false;
    continue;
  }
  System.out.println("   | " + name + " exists and is empty");
}

System.out.println("\nVerifying log snippets...");
for (String snippet : snippets) {
  if (!log.contains(snippet)) {
    System.err.println("XXX| Snippet `" + snippet + "` not found");
    ok = false;
    continue;
  }
  System.out.println("   | `" + snippet + "` found in log");
}

System.out.println("\nVerifying bad log snippets...");
for (String snippet : badSnippets) {
  if (log.contains(snippet)) {
    System.err.println("XXX| Snippet `" + snippet + "` found");
    ok = false;
    continue;
  }
  System.out.println("   | `" + snippet + "` not found");
}

return ok;
