import it.Verifier;

Verifier verifier = new Verifier(basedir.toPath());

verifier.verifyBadLines();

verifier.verifyLogMatches(new String[] {
  ">> BEGIN >>",
  "[INFO] ------------------------------------------------------------------------",
  "[INFO] Reactor Build Order:",
  "[INFO] ",
  "[INFO] parent                                                             [pom]",
  "[INFO] tool                                                               [jar]",
  "[INFO] application                                                        [jar]",
  "[INFO] verification                                                       [jar]",
  "[INFO] with-spaces-in-path                                                [jar]",
  ">> parent... >>",
  "[INFO] JUnit Platform Plugin execution skipped: project uses 'pom' packaging",
  ">> tool... >>",
  "[DEBUG]   main -> module tool { requires=[java.base] packages=[tool] }",
  "[DEBUG]   test -> open module tool { requires=[org.junit.jupiter.api, java.base] packages=[tool] }",
  "[DEBUG]   mode -> MODULAR_PATCHED_TEST_COMPILE",
  ">> application... >>",
  "[DEBUG]   main -> module application { requires=[java.base, tool] packages=[application] }",
  "[DEBUG]   test -> open module application { requires=[org.junit.jupiter.api, java.base, tool] packages=[application] }",
  "[DEBUG]   mode -> MODULAR_PATCHED_TEST_COMPILE",
  ">> verification... >>",
  "[DEBUG]   main -> <empty>",
  "[DEBUG]   test -> open module verification { requires=[org.junit.jupiter.api, java.base, tool, application] packages=[verification] }",
  "[DEBUG]   mode -> MODULAR",
  ">> with-spaces-in-path... >>",
  "[DEBUG]   main -> module spaces { requires=[java.base] packages=[spaces] }",
  "[DEBUG]   test -> <empty>",
  "[DEBUG]   mode -> MODULAR_PATCHED_TEST_RUNTIME",
  ">> More information lines... >>",
  "[INFO] BUILD SUCCESS",
  ">> END. >>"
});

return verifier.isOk();
